name: CD_STAGE
on:
  push:
    branches: [ "master" ]
permissions:
  contents: read
jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12.3
      uses: actions/setup-python@v3
      with:
        python-version: "3.12.3"
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USER }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    - name: Create .env File
      run: |
        echo "MLFLOW_TRACKING_USERNAME=${{ secrets.MLFLOW_TRACKING_USERNAME }}" >> .env
        echo "MLFLOW_TRACKING_PASSWORD=${{ secrets.MLFLOW_TRACKING_PASSWORD }}" >> .env
        echo "MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}" >> .env
        echo "MODEL_ALIAS=${{ secrets.MODEL_ALIAS}}" >> .env
    - name: Build Container
      run: |
        docker compose build
        docker compose push
  deploy:
    runs-on: ubuntu-latest
    needs: build-push
    steps:
    - uses: actions/checkout@v4
    - name: Creating SSH Configuration File
      env:
        SSH_USER: ${{ secrets.SSH_USER_STAGE }}
        SSH_KEY: ${{ secrets.SSH_KEY_STAGE }}
        SSH_HOST: ${{ secrets.SSH_HOST_STAGE }}
      run: |
        mkdir -p ~/.ssh/
        echo "$SSH_KEY" > ~/.ssh/deployment.pem
        chmod 600 ~/.ssh/deployment.pem
        cat >> ~/.ssh/config <<END
        Host deploy_ec2
          HostName $SSH_HOST
          User $SSH_USER
          IdentityFile ~/.ssh/deployment.pem
          StrictHostKeyChecking no
        END
    - name: Create .env File
      run: |
        echo "MLFLOW_TRACKING_USERNAME=${{ secrets.MLFLOW_TRACKING_USERNAME }}" >> .env
        echo "MLFLOW_TRACKING_PASSWORD=${{ secrets.MLFLOW_TRACKING_PASSWORD }}" >> .env
        echo "MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}" >> .env
        echo "MODEL_ALIAS=${{ secrets.MODEL_ALIAS_STAGE }}" >> .env
    - name: Deploy to EC2
      run: |
        ssh deploy_ec2 "rm -f docker-compose.yml"
        scp docker-compose.yml .env deploy_ec2:.
        ssh deploy_ec2 "sudo docker compose down && sudo docker system prune -af"
        ssh deploy_ec2 "sudo docker compose pull && sudo docker compose up -d"